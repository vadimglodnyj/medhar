#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è —Ç–∞ —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö Personnel
"""

import pandas as pd
import os
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class PersonnelDatabase:
    """–ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—É"""
    
    def __init__(self, database_path=None):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        
        Args:
            database_path (str): –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É database.xlsx
        """
        if database_path is None:
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —à–ª—è—Ö –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –≤—ñ–¥–Ω–æ—Å–Ω–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª—É
            current_dir = os.path.dirname(os.path.abspath(__file__))
            parent_dir = os.path.dirname(current_dir)
            database_path = os.path.join(parent_dir, 'data', 'database.xlsx')
        
        self.database_path = database_path
        self.data = None
        self.commanders_data = None
        self.sheet_name = 'Personnel'
        self.commanders_sheet = 'Commanders'
        
    def load_data(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –∑ –∞—Ä–∫—É—à–∞ Personnel"""
        try:
            if not os.path.exists(self.database_path):
                raise FileNotFoundError(f"–§–∞–π–ª {self.database_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
            logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ {self.database_path}, –∞—Ä–∫—É—à '{self.sheet_name}'...")
            
            # –ß–∏—Ç–∞—î–º–æ –¥–∞–Ω—ñ –∑ –∞—Ä–∫—É—à–∞ Personnel
            self.data = pd.read_excel(self.database_path, sheet_name=self.sheet_name)
            
            # –û—á–∏—â–∞—î–º–æ –Ω–∞–∑–≤–∏ –∫–æ–ª–æ–Ω–æ–∫ –≤—ñ–¥ –∑–∞–π–≤–∏—Ö –ø—Ä–æ–±—ñ–ª—ñ–≤
            self.data.columns = self.data.columns.str.strip()
            
            logger.info(f"‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ. –ó–∞–ø–∏—Å—ñ–≤: {len(self.data)}")
            logger.info(f"üìã –ö–æ–ª–æ–Ω–∫–∏: {list(self.data.columns)}")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ –∫—ñ–ª—å–∫–∞ –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            if len(self.data) > 0:
                logger.info("üìÑ –ü–µ—Ä—à—ñ 3 –∑–∞–ø–∏—Å–∏:")
                for i, row in self.data.head(3).iterrows():
                    logger.info(f"  –ó–∞–ø–∏—Å {i+1}: {dict(row)}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {e}")
            return False
    
    def load_commanders_data(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –∑ –∞—Ä–∫—É—à–∞ Commanders"""
        try:
            if not os.path.exists(self.database_path):
                raise FileNotFoundError(f"–§–∞–π–ª {self.database_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
            logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ–º–∞–Ω–¥–∏—Ä—ñ–≤ –∑ {self.database_path}, –∞—Ä–∫—É—à '{self.commanders_sheet}'...")
            
            # –ß–∏—Ç–∞—î–º–æ –¥–∞–Ω—ñ –∑ –∞—Ä–∫—É—à–∞ Commanders
            self.commanders_data = pd.read_excel(self.database_path, sheet_name=self.commanders_sheet)
            
            # –û—á–∏—â–∞—î–º–æ –Ω–∞–∑–≤–∏ –∫–æ–ª–æ–Ω–æ–∫ –≤—ñ–¥ –∑–∞–π–≤–∏—Ö –ø—Ä–æ–±—ñ–ª—ñ–≤
            self.commanders_data.columns = self.commanders_data.columns.str.strip()
            
            logger.info(f"‚úÖ –î–∞–Ω—ñ –∫–æ–º–∞–Ω–¥–∏—Ä—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ. –ó–∞–ø–∏—Å—ñ–≤: {len(self.commanders_data)}")
            logger.info(f"üìã –ö–æ–ª–æ–Ω–∫–∏ –∫–æ–º–∞–Ω–¥–∏—Ä—ñ–≤: {list(self.commanders_data.columns)}")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ –∫—ñ–ª—å–∫–∞ –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            if len(self.commanders_data) > 0:
                logger.info("üìÑ –ü–µ—Ä—à—ñ 3 –∑–∞–ø–∏—Å–∏ –∫–æ–º–∞–Ω–¥–∏—Ä—ñ–≤:")
                for i, row in self.commanders_data.head(3).iterrows():
                    logger.info(f"  –ó–∞–ø–∏—Å {i+1}: {dict(row)}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∫–æ–º–∞–Ω–¥–∏—Ä—ñ–≤: {e}")
            return False
    
    def get_data_info(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –¥–∞–Ω—ñ"""
        if self.data is None:
            return {"error": "–î–∞–Ω—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ"}
        
        info = {
            "total_records": len(self.data),
            "columns": list(self.data.columns),
            "data_types": dict(self.data.dtypes),
            "sample_data": self.data.head(2).to_dict('records') if len(self.data) > 0 else []
        }
        
        return info
    
    def search_by_surname(self, surname):
        """
        –ü–æ—à—É–∫ –ª—é–¥–µ–π –∑–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º
        
        Args:
            surname (str): –ü—Ä—ñ–∑–≤–∏—â–µ –¥–ª—è –ø–æ—à—É–∫—É
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
        """
        if self.data is None:
            logger.error("–î–∞–Ω—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–ª–∏—á—Ç–µ load_data()")
            return []
        
        if not surname or not surname.strip():
            logger.warning("–ü—Ä—ñ–∑–≤–∏—â–µ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ")
            return []
        
        surname = surname.strip().lower()
        logger.info(f"üîç –ü–æ—à—É–∫ –∑–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º: '{surname}'")
        
        # –®—É–∫–∞—î–º–æ –∫–æ–ª–æ–Ω–∫–∏, —è–∫—ñ –º–æ–∂—É—Ç—å –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä—ñ–∑–≤–∏—â–µ
        surname_columns = []
        for col in self.data.columns:
            col_lower = col.lower()
            if any(keyword in col_lower for keyword in ['–ø—Ä—ñ–∑–≤–∏—â–µ', 'surname', 'lastname', '—Ñ–∞–º–∏–ª–∏—è']):
                surname_columns.append(col)
        
        if not surname_columns:
            logger.warning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ –∑ –ø—Ä—ñ–∑–≤–∏—â–∞–º–∏")
            return []
        
        logger.info(f"üìã –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø–æ—à—É–∫—É –ø—Ä—ñ–∑–≤–∏—â: {surname_columns}")
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—à—É–∫
        found_records = []
        
        for col in surname_columns:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞—Å–∫—É –¥–ª—è –ø–æ—à—É–∫—É (–Ω–µ—á—É—Ç–ª–∏–≤–∏–π –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É)
            mask = self.data[col].astype(str).str.lower().str.contains(surname, na=False)
            matches = self.data[mask]
            
            if len(matches) > 0:
                logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(matches)} –∑–∞–ø–∏—Å—ñ–≤ —É –∫–æ–ª–æ–Ω—Ü—ñ '{col}'")
                found_records.extend(matches.to_dict('records'))
        
        # –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
        unique_records = []
        seen = set()
        for record in found_records:
            # –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –¥–ª—è –∑–∞–ø–∏—Å—É
            record_key = str(record)
            if record_key not in seen:
                seen.add(record_key)
                unique_records.append(record)
        
        logger.info(f"üéØ –í—Å—å–æ–≥–æ –∑–Ω–∞–π–¥–µ–Ω–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤: {len(unique_records)}")
        
        return unique_records
    
    def get_all_surnames(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –≤—Å—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –ø—Ä—ñ–∑–≤–∏—â–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        if self.data is None:
            logger.error("–î–∞–Ω—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ")
            return []
        
        surnames = set()
        
        # –®—É–∫–∞—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ –∑ –ø—Ä—ñ–∑–≤–∏—â–∞–º–∏
        for col in self.data.columns:
            col_lower = col.lower()
            if any(keyword in col_lower for keyword in ['–ø—Ä—ñ–∑–≤–∏—â–µ', 'surname', 'lastname', '—Ñ–∞–º–∏–ª–∏—è']):
                # –î–æ–¥–∞—î–º–æ –≤—Å—ñ –Ω–µ–ø—É—Å—Ç—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
                col_surnames = self.data[col].dropna().astype(str).str.strip()
                col_surnames = col_surnames[col_surnames != '']
                surnames.update(col_surnames)
        
        return sorted(list(surnames))
    
    def get_commanders_data(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–∞–Ω—ñ –∫–æ–º–∞–Ω–¥–∏—Ä—ñ–≤"""
        if self.commanders_data is None:
            logger.warning("–î–∞–Ω—ñ –∫–æ–º–∞–Ω–¥–∏—Ä—ñ–≤ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ. –í–∏–∫–ª–∏—á—Ç–µ load_commanders_data() —Å–ø–æ—á–∞—Ç–∫—É")
            return None
        return self.commanders_data
    
    def get_main_commander(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–∞–Ω—ñ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –∫–æ–º–∞–Ω–¥–∏—Ä–∞"""
        if self.commanders_data is None:
            logger.warning("–î–∞–Ω—ñ –∫–æ–º–∞–Ω–¥–∏—Ä—ñ–≤ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ")
            return None
        
        # –®—É–∫–∞—î–º–æ –∑–∞–ø–∏—Å –∑ main\direct = 'main'
        main_commander = self.commanders_data[
            self.commanders_data['main\\direct'].str.lower() == 'main'
        ]
        
        if len(main_commander) > 0:
            return main_commander.iloc[0].to_dict()
        else:
            logger.warning("–ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–º–∞–Ω–¥–∏—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return None
    
    def get_direct_commander(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–∞–Ω—ñ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫–æ–º–∞–Ω–¥–∏—Ä–∞"""
        if self.commanders_data is None:
            logger.warning("–î–∞–Ω—ñ –∫–æ–º–∞–Ω–¥–∏—Ä—ñ–≤ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ")
            return None
        
        # –®—É–∫–∞—î–º–æ –∑–∞–ø–∏—Å –∑ main\direct = 'direct'
        direct_commander = self.commanders_data[
            self.commanders_data['main\\direct'].str.lower() == 'direct'
        ]
        
        if len(direct_commander) > 0:
            return direct_commander.iloc[0].to_dict()
        else:
            logger.warning("–ë–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—ñ–π –∫–æ–º–∞–Ω–¥–∏—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return None
    
    def get_soldier_position(self, soldier_data):
        """
        –§–æ—Ä–º—É—î –ø–æ—Å–∞–¥—É —Å–æ–ª–¥–∞—Ç–∞ –∑ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –ø–æ–ª—ñ–≤
        
        Args:
            soldier_data (dict): –î–∞–Ω—ñ —Å–æ–ª–¥–∞—Ç–∞ –∑ –±–∞–∑–∏ Personnel
            
        Returns:
            str: –°—Ñ–æ—Ä–º–æ–≤–∞–Ω–∞ –ø–æ—Å–∞–¥–∞
        """
        try:
            position = soldier_data.get('–ü–æ—Å–∞–¥–∞', '').strip()
            podrozdil_4 = soldier_data.get('–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª 4', '').strip()
            podrozdil_3 = soldier_data.get('–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª 3', '').strip()
            
            # –§–æ—Ä–º—É—î–º–æ –ø–æ—Å–∞–¥—É
            parts = [position, podrozdil_4, podrozdil_3, "2-–≥–æ –±–∞—Ç–∞–ª—å–π–æ–Ω—É –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è"]
            parts = [part for part in parts if part]  # –í–∏–¥–∞–ª—è—î–º–æ –ø—É—Å—Ç—ñ —á–∞—Å—Ç–∏–Ω–∏
            
            return " ".join(parts)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ –ø–æ—Å–∞–¥–∏: {e}")
            return soldier_data.get('–ü–æ—Å–∞–¥–∞', '')
    
    def get_soldier_name_only(self, soldier_data):
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î —Ç—ñ–ª—å–∫–∏ –ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è (–±–µ–∑ –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ)
        
        Args:
            soldier_data (dict): –î–∞–Ω—ñ —Å–æ–ª–¥–∞—Ç–∞ –∑ –±–∞–∑–∏ Personnel
            
        Returns:
            str: –ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è
        """
        try:
            surname = soldier_data.get('–ü—Ä—ñ–∑–≤–∏—â–µ', '').strip()
            name = soldier_data.get('–Ü–º\'—è', '').strip()
            
            return f"{surname} {name}".strip()
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ —ñ–º–µ–Ω—ñ: {e}")
            return ""
    
    def get_soldier_full_name(self, soldier_data):
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤–Ω–∏–π –ü–Ü–ë –≤ –Ω–∞–∑–∏–≤–Ω–æ–º—É –≤—ñ–¥–º—ñ–Ω–∫—É
        
        Args:
            soldier_data (dict): –î–∞–Ω—ñ —Å–æ–ª–¥–∞—Ç–∞ –∑ –±–∞–∑–∏ Personnel
            
        Returns:
            str: –ü–æ–≤–Ω–∏–π –ü–Ü–ë
        """
        try:
            surname = soldier_data.get('–ü—Ä—ñ–∑–≤–∏—â–µ', '').strip()
            name = soldier_data.get('–Ü–º\'—è', '').strip()
            patronymic = soldier_data.get('–Ü–º\'—è –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ', '').strip()
            
            return f"{surname} {name} {patronymic}".strip()
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ –ø–æ–≤–Ω–æ–≥–æ –ü–Ü–ë: {e}")
            return ""

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —á–∏—Ç–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö Personnel")
    print("=" * 50)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    db = PersonnelDatabase()
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
    if not db.load_data():
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ")
        return
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–∞–Ω—ñ
    print("\nüìä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–∞–Ω—ñ:")
    info = db.get_data_info()
    print(f"  –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: {info['total_records']}")
    print(f"  –ö–æ–ª–æ–Ω–∫–∏: {info['columns']}")
    
    # –¢–µ—Å—Ç—É—î–º–æ –ø–æ—à—É–∫ –∑–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º
    print("\nüîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É –∑–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º:")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø—Ä—ñ–∑–≤–∏—â–∞ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    all_surnames = db.get_all_surnames()
    print(f"  –ó–Ω–∞–π–¥–µ–Ω–æ {len(all_surnames)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –ø—Ä—ñ–∑–≤–∏—â")
    
    if all_surnames:
        # –¢–µ—Å—Ç—É—î–º–æ –ø–æ—à—É–∫ –¥–ª—è –ø–µ—Ä—à–∏—Ö 3 –ø—Ä—ñ–∑–≤–∏—â
        test_surnames = all_surnames[:3]
        for surname in test_surnames:
            print(f"\n  –ü–æ—à—É–∫: '{surname}'")
            results = db.search_by_surname(surname)
            print(f"    –ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å—ñ–≤: {len(results)}")
            
            if results:
                print(f"    –ü–µ—Ä—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {results[0]}")
    
    print("\n‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
