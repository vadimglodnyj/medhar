#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó —Ñ–∞–π–ª—É old_treatments.xlsx –ø—ñ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—É treatments
–ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î –¥–∞–Ω—ñ –≤ —Ñ–æ—Ä–º–∞—Ç, —Å—É–º—ñ—Å–Ω–∏–π –∑ –º–µ–¥–∏—á–Ω–æ—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–æ—é
"""

import pandas as pd
import os
import sys
from datetime import datetime
import re

def clean_pib(pib_text):
    """–û—á–∏—â–∞—î —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É—î –ü–Ü–ë"""
    if pd.isna(pib_text) or not pib_text:
        return ""
    
    # –í–∏–¥–∞–ª—è—î–º–æ –Ω–æ–º–µ—Ä–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —Ç–∞ –∑–∞–π–≤—ñ —Å–∏–º–≤–æ–ª–∏
    pib_clean = re.sub(r'\d{10,}', '', str(pib_text))  # –í–∏–¥–∞–ª—è—î–º–æ –Ω–æ–º–µ—Ä–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤
    pib_clean = re.sub(r'\n+', ' ', pib_clean)  # –ó–∞–º—ñ–Ω—é—î–º–æ –ø–µ—Ä–µ–Ω–æ—Å–∏ —Ä—è–¥–∫—ñ–≤ –Ω–∞ –ø—Ä–æ–±—ñ–ª–∏
    pib_clean = re.sub(r'\s+', ' ', pib_clean).strip()  # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–æ–±—ñ–ª–∏
    
    return pib_clean

def determine_treatment_type(row):
    """–í–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø –ª—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞–Ω–∏—Ö"""
    bd_combat = str(row.get('–ë–æ–π–æ–≤–∞ / –Ω–µ–±–æ–π–æ–≤–∞', '')).lower()
    place = str(row.get('–ú—ñ—Å—Ü–µ –≥–æ—Å–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó', '')).lower()
    
    # –Ø–∫—â–æ —î –¥–∞—Ç–∞ –ø–æ—Ä–∞–Ω–µ–Ω–Ω—è - —Ü–µ —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ–π–Ω–∏–π –ø—É–Ω–∫—Ç
    if pd.notna(row.get('–î–∞—Ç–∞ —Ç–∞ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ä–∞–Ω–µ–Ω–Ω—è / —Ç—Ä–∞–≤–º—É–≤–∞–Ω–Ω—è')):
        return '—Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ–π–Ω–∏–π –ø—É–Ω–∫—Ç'
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –Ω–∞ –æ—Å–Ω–æ–≤—ñ –º—ñ—Å—Ü—è –≥–æ—Å–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó
    if '–º–µ–¥–∏—á–Ω–∏–π –ø—É–Ω–∫—Ç' in place:
        return '—Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ–π–Ω–∏–π –ø—É–Ω–∫—Ç'
    elif '—à–ø–∏—Ç–∞–ª—å' in place or '–ª—ñ–∫–∞—Ä–Ω—è' in place:
        return '—Å—Ç–∞—Ü—ñ–æ–Ω–∞—Ä'
    elif '—Å–∞–Ω–∞—Ç–æ—Ä—ñ–π' in place:
        return '—Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ—è'
    elif '–≤–ª–∫' in place:
        return '–≤–ª–∫'
    elif '–≤—ñ–¥–ø—É—Å—Ç–∫–∞' in place:
        return '–≤—ñ–¥–ø—É—Å—Ç–∫–∞'
    else:
        return '—Å—Ç–∞—Ü—ñ–æ–Ω–∞—Ä'  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

def parse_dates(date_text):
    """–ü–∞—Ä—Å–∏—Ç—å –¥–∞—Ç–∏ –∑ —Ç–µ–∫—Å—Ç—É"""
    if pd.isna(date_text) or not date_text:
        return None, None
    
    date_str = str(date_text)
    
    # –®—É–∫–∞—î–º–æ –¥–∞—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ –¥–¥.–º–º.—Ä—Ä –∞–±–æ –¥–¥.–º–º.—Ä—Ä—Ä—Ä
    date_pattern = r'(\d{1,2}\.\d{1,2}\.\d{2,4})'
    dates = re.findall(date_pattern, date_str)
    
    if dates:
        try:
            # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à—É –¥–∞—Ç—É —è–∫ –¥–∞—Ç—É –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è
            start_date = dates[0]
            # –Ø–∫—â–æ —î –¥—Ä—É–≥–∞ –¥–∞—Ç–∞ - —Ü–µ –¥–∞—Ç–∞ –≤–∏–ø–∏—Å–∫–∏
            end_date = dates[1] if len(dates) > 1 else None
            
            return start_date, end_date
        except:
            return None, None
    
    return None, None

def extract_circumstances(circumstances_text):
    """–í–∏—Ç—è–≥—É—î –æ–±—Å—Ç–∞–≤–∏–Ω–∏ –ø–æ—Ä–∞–Ω–µ–Ω–Ω—è"""
    if pd.isna(circumstances_text) or not circumstances_text:
        return ""
    
    # –û—á–∏—â–∞—î–º–æ —Ç–µ–∫—Å—Ç
    circumstances = str(circumstances_text).strip()
    
    # –Ø–∫—â–æ —Ç–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π, –æ–±—Ä—ñ–∑–∞—î–º–æ
    if len(circumstances) > 500:
        circumstances = circumstances[:500] + "..."
    
    return circumstances

def _extract_dates(text):
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –¥–∞—Ç —É —Ç–µ–∫—Å—Ç—ñ (—É –ø–æ—Ä—è–¥–∫—É –ø–æ—è–≤–∏)."""
    if pd.isna(text) or not text:
        return []
    pattern = r"(\d{1,2}\.\d{1,2}\.\d{2,4})"
    return re.findall(pattern, str(text))

def determine_treatment_type_from_text(place_text):
    """–ì—Ä—É–±–∞ –µ–≤—Ä–∏—Å—Ç–∏–∫–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –ª—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞ –Ω–∞–∑–≤–æ—é –∑–∞–∫–ª–∞–¥—É."""
    txt = (place_text or "").lower()
    if '–≤–ª–∫' in txt:
        return '–≤–ª–∫'
    if '–≤—ñ–¥–ø—É—Å—Ç–∫' in txt:
        return '–≤—ñ–¥–ø—É—Å—Ç–∫–∞'
    if '–º–µ–¥–∏—á–Ω–∏–π –ø—É–Ω–∫—Ç' in txt or '–º–µ–¥–ø—É–Ω–∫—Ç' in txt or '—Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ' in txt or '–ª—Å–±' in txt:
        return '—Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ–π–Ω–∏–π –ø—É–Ω–∫—Ç'
    if '—Å–∞–Ω–∞—Ç–æ—Ä' in txt or '—Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü' in txt:
        return '—Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ—è'
    if '—à–ø–∏—Ç–∞–ª—å' in txt or '–ª—ñ–∫–∞—Ä–Ω' in txt or '–≤–º–∫—Ü' in txt or '–∫–ª—ñ–Ω—ñ–∫' in txt:
        return '—Å—Ç–∞—Ü—ñ–æ–Ω–∞—Ä'
    return '—Å—Ç–∞—Ü—ñ–æ–Ω–∞—Ä'

def split_episodes(place_block, discharge_block):
    """
    –†–æ–∑–±–∏–≤–∞—î –æ–¥–∏–Ω –∑–∞–ø–∏—Å –∑ –∫—ñ–ª—å–∫–æ–º–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è–º–∏ –Ω–∞ –µ–ø—ñ–∑–æ–¥–∏.
    - place_block: —Ä—è–¥–æ–∫ –∑ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–∫–ª–∞–¥—ñ–≤ —Ç–∞ –¥–∞—Ç –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è
    - discharge_block: —Ä—è–¥–æ–∫ –∑ –¥–∞—Ç–∞–º–∏ –≤–∏–ø–∏—Å–∫–∏

    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤: [{ 'place': str, 'admit_date': str|None, 'discharge_date': str|None }]
    """
    if pd.isna(place_block) and pd.isna(discharge_block):
        return []

    lines = str(place_block or "").splitlines()
    episodes = []
    current_place_lines = []
    date_regex = re.compile(r"^\s*(\d{1,2}\.\d{1,2}\.\d{2,4})\s*$")

    def flush_episode(with_date):
        place_text = re.sub(r"\s+", " ", " ".join(current_place_lines).strip())
        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–µ–≥–º–µ–Ω—Ç–∏, —â–æ —Å—Ç–æ—Å—É—é—Ç—å—Å—è –í–õ–ö/–≤—ñ–¥–ø—É—Å—Ç–∫–∏
        if place_text and not any(k in place_text.lower() for k in ['–≤–ª–∫', '–≤—ñ–¥–ø—É—Å—Ç–∫']):
            episodes.append({
                'place': place_text,
                'admit_date': with_date,
                'discharge_date': None,
            })

    for raw_line in lines:
        line = raw_line.strip()
        if not line:
            continue
        m = date_regex.match(line)
        if m:
            admit_date = m.group(1)
            flush_episode(admit_date)
            current_place_lines = []
        else:
            current_place_lines.append(line)

    # –Ø–∫—â–æ –∑–∞–∫—ñ–Ω—á–∏–ª–∏ –±–µ–∑ –¥–∞—Ç–∏, —Å—Ç–≤–æ—Ä—é—î–º–æ –µ–ø—ñ–∑–æ–¥ –±–µ–∑ –¥–∞—Ç–∏ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è
    if current_place_lines:
        flush_episode(None)

    # –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ –¥–∞—Ç–∏ –≤–∏–ø–∏—Å–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
    discharges = _extract_dates(discharge_block)
    for i in range(min(len(episodes), len(discharges))):
        episodes[i]['discharge_date'] = discharges[i]

    return episodes

def adapt_old_treatments(input_file, output_file):
    """–ê–¥–∞–ø—Ç—É—î —Å—Ç–∞—Ä–∏–π —Ñ–∞–π–ª –ø—ñ–¥ –Ω–æ–≤—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
    
    print("üîÑ –ê–î–ê–ü–¢–ê–¶–Ü–Ø –§–ê–ô–õ–£ old_treatments.xlsx")
    print("=" * 60)
    
    # –ß–∏—Ç–∞—î–º–æ –≤—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª
    print("üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É...")
    try:
        df = pd.read_excel(input_file)
        print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å—ñ–≤")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e}")
        return False
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π DataFrame –∑ –ø–æ—Ç—Ä—ñ–±–Ω–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
    print("üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏...")
    
    adapted_data = []
    
    for index, row in df.iterrows():
        if index % 1000 == 0:
            print(f"   –û–±—Ä–æ–±–ª–µ–Ω–æ {index}/{len(df)} –∑–∞–ø–∏—Å—ñ–≤...")
        
        # –û—á–∏—â–∞—î–º–æ –ü–Ü–ë
        pib_clean = clean_pib(row.get('–ü.–Ü.–ë.', ''))
        if not pib_clean:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–ø–∏—Å–∏ –±–µ–∑ –ü–Ü–ë
        
        # –†–æ–∑–±–∏–≤–∞—î–º–æ –ü–Ü–ë –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
        pib_parts = pib_clean.split()
        if len(pib_parts) < 2:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —è–∫—â–æ –ü–Ü–ë –Ω–µ –ø–æ–≤–Ω–∏–π
        
        surname = pib_parts[0] if len(pib_parts) > 0 else ""
        name = pib_parts[1] if len(pib_parts) > 1 else ""
        patronymic = pib_parts[2] if len(pib_parts) > 2 else ""
        
        # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ –µ–ø—ñ–∑–æ–¥–∏
        episodes = split_episodes(row.get('–ú—ñ—Å—Ü–µ –≥–æ—Å–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó', ''), row.get('–î–∞—Ç–∞ –≤–∏–ø–∏—Å–∫–∏', ''))

        # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–±–∏—Ç–∏, –ø–∞–¥–∞—î–º–æ –Ω–∞–∑–∞–¥ –Ω–∞ —Å—Ç–∞—Ä—É –ª–æ–≥—ñ–∫—É –æ–¥–Ω–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É
        if not episodes:
            start_date, end_date = parse_dates(row.get('–ú—ñ—Å—Ü–µ –≥–æ—Å–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó', ''))
            if not start_date:
                start_date, _ = parse_dates(row.get('–î–∞—Ç–∞ —Ç–∞ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ä–∞–Ω–µ–Ω–Ω—è / —Ç—Ä–∞–≤–º—É–≤–∞–Ω–Ω—è', ''))
            if not end_date:
                end_date, _ = parse_dates(row.get('–î–∞—Ç–∞ –≤–∏–ø–∏—Å–∫–∏', ''))

            circumstances = extract_circumstances(row.get('–û–±—Å—Ç–∞–≤–∏–Ω–∏ —Ç–∞ –º—ñ—Å—Ü–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ä–∞–Ω–µ–Ω–Ω—è / —Ç—Ä–∞–≤–º—É–≤–∞–Ω–Ω—è', ''))
            treatment_type = determine_treatment_type(row)

            record = {
                '–ü—Ä—ñ–∑–≤–∏—â–µ': surname,
                '–Ü–º\'—è': name,
                '–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ': patronymic,
                '–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è': None,
                '–í—ñ–π—Å—å–∫–æ–≤–µ –∑–≤–∞–Ω–Ω—è': row.get('–í—ñ–π—Å—å–∫–æ–≤–µ –∑–≤–∞–Ω–Ω—è', ''),
                '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è': row.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', ''),
                '–î–∞—Ç–∞ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è –≤ –ø–æ—Ç–æ—á–Ω–∏–π –õ/–ó': start_date,
                '–î–∞—Ç–∞ –≤–∏–ø–∏—Å–∫–∏': end_date,
                '–í–∏–¥ –ª—ñ–∫—É–≤–∞–Ω–Ω—è': treatment_type,
                '–ú—ñ—Å—Ü–µ –≥–æ—Å–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó': row.get('–ú—ñ—Å—Ü–µ –≥–æ—Å–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó', ''),
                '–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –¥—ñ–∞–≥–Ω–æ–∑': row.get('–î—ñ–∞–≥–Ω–æ–∑', ''),
                '–û–±—Å—Ç–∞–≤–∏–Ω–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ä–∞–Ω–µ–Ω–Ω—è/ —Ç—Ä–∞–≤–º—É–≤–∞–Ω–Ω—è': circumstances,
                '–ó–∞–∫–ª—é—á–µ–Ω–Ω—è –í–õ–ö': None,
                '–î–∂–µ—Ä–µ–ª–æ': 'old_treatments'
            }
            adapted_data.append(record)
        else:
            circumstances = extract_circumstances(row.get('–û–±—Å—Ç–∞–≤–∏–Ω–∏ —Ç–∞ –º—ñ—Å—Ü–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ä–∞–Ω–µ–Ω–Ω—è / —Ç—Ä–∞–≤–º—É–≤–∞–Ω–Ω—è', ''))
            for ep in episodes:
                place_text = ep['place']
                start_date = ep['admit_date']
                end_date = ep['discharge_date']
                treatment_type = determine_treatment_type_from_text(place_text)
                record = {
                    '–ü—Ä—ñ–∑–≤–∏—â–µ': surname,
                    '–Ü–º\'—è': name,
                    '–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ': patronymic,
                    '–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è': None,
                    '–í—ñ–π—Å—å–∫–æ–≤–µ –∑–≤–∞–Ω–Ω—è': row.get('–í—ñ–π—Å—å–∫–æ–≤–µ –∑–≤–∞–Ω–Ω—è', ''),
                    '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è': row.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', ''),
                    '–î–∞—Ç–∞ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è –≤ –ø–æ—Ç–æ—á–Ω–∏–π –õ/–ó': start_date,
                    '–î–∞—Ç–∞ –≤–∏–ø–∏—Å–∫–∏': end_date,
                    '–í–∏–¥ –ª—ñ–∫—É–≤–∞–Ω–Ω—è': treatment_type,
                    '–ú—ñ—Å—Ü–µ –≥–æ—Å–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó': place_text,
                    '–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –¥—ñ–∞–≥–Ω–æ–∑': row.get('–î—ñ–∞–≥–Ω–æ–∑', ''),
                    '–û–±—Å—Ç–∞–≤–∏–Ω–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ä–∞–Ω–µ–Ω–Ω—è/ —Ç—Ä–∞–≤–º—É–≤–∞–Ω–Ω—è': circumstances,
                    '–ó–∞–∫–ª—é—á–µ–Ω–Ω—è –í–õ–ö': None,
                    '–î–∂–µ—Ä–µ–ª–æ': 'old_treatments'
                }
                adapted_data.append(record)
    
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {len(adapted_data)} –∞–¥–∞–ø—Ç–æ–≤–∞–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π DataFrame
    adapted_df = pd.DataFrame(adapted_data)
    
    # –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
    print("üîç –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤...")
    initial_count = len(adapted_df)
    adapted_df = adapted_df.drop_duplicates(subset=['–ü—Ä—ñ–∑–≤–∏—â–µ', '–Ü–º\'—è', '–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ', '–î–∞—Ç–∞ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è –≤ –ø–æ—Ç–æ—á–Ω–∏–π –õ/–ó'])
    final_count = len(adapted_df)
    print(f"   –í–∏–¥–∞–ª–µ–Ω–æ {initial_count - final_count} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤")
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–¥–∞–ø—Ç–æ–≤–∞–Ω–æ–≥–æ —Ñ–∞–π–ª—É...")
    try:
        adapted_df.to_excel(output_file, index=False)
        print(f"‚úÖ –§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {output_file}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}")
        return False
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–î–ê–ü–¢–ê–¶–Ü–á:")
    print("-" * 40)
    print(f"–í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: {final_count}")
    print(f"–ó–∞–ø–∏—Å—ñ–≤ –∑ –¥–∞—Ç–æ—é –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è: {adapted_df['–î–∞—Ç–∞ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è –≤ –ø–æ—Ç–æ—á–Ω–∏–π –õ/–ó'].notna().sum()}")
    print(f"–ó–∞–ø–∏—Å—ñ–≤ –∑ –¥–∞—Ç–æ—é –≤–∏–ø–∏—Å–∫–∏: {adapted_df['–î–∞—Ç–∞ –≤–∏–ø–∏—Å–∫–∏'].notna().sum()}")
    print(f"–ó–∞–ø–∏—Å—ñ–≤ –∑ –¥—ñ–∞–≥–Ω–æ–∑–æ–º: {adapted_df['–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –¥—ñ–∞–≥–Ω–æ–∑'].notna().sum()}")
    print(f"–ó–∞–ø–∏—Å—ñ–≤ –∑ –æ–±—Å—Ç–∞–≤–∏–Ω–∞–º–∏: {adapted_df['–û–±—Å—Ç–∞–≤–∏–Ω–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ä–∞–Ω–µ–Ω–Ω—è/ —Ç—Ä–∞–≤–º—É–≤–∞–Ω–Ω—è'].notna().sum()}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞—Ö –ª—ñ–∫—É–≤–∞–Ω–Ω—è
    print("\nüè• –¢–ò–ü–ò –õ–Ü–ö–£–í–ê–ù–ù–Ø:")
    treatment_stats = adapted_df['–í–∏–¥ –ª—ñ–∫—É–≤–∞–Ω–Ω—è'].value_counts()
    for treatment, count in treatment_stats.items():
        percentage = (count / final_count) * 100
        print(f"   ‚Ä¢ {treatment}: {count} ({percentage:.1f}%)")
    
    return True

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    input_file = r"D:\medchar\data\old_treatments.xlsx"
    output_file = r"D:\medchar\data\treatments_adapted.xlsx"
    
    print("üîß –ê–î–ê–ü–¢–ê–¢–û–† –§–ê–ô–õ–Ü–í –î–õ–Ø –ú–ï–î–ò–ß–ù–û–á –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò")
    print("=" * 60)
    print(f"–ß–∞—Å –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
    print()
    
    if not os.path.exists(input_file):
        print(f"‚ùå –í–•–Ü–î–ù–ò–ô –§–ê–ô–õ –ù–ï –ó–ù–ê–ô–î–ï–ù–û: {input_file}")
        return
    
    success = adapt_old_treatments(input_file, output_file)
    
    print("\n" + "=" * 60)
    if success:
        print("‚úÖ –ê–î–ê–ü–¢–ê–¶–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–Ü–®–ù–û")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {output_file}")
        print("\nüí° –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò:")
        print("   1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∞–¥–∞–ø—Ç–æ–≤–∞–Ω–∏–π —Ñ–∞–π–ª")
        print("   2. –î–æ–¥–∞–π—Ç–µ –π–æ–≥–æ –¥–æ config.py —è–∫ –¥–æ–¥–∞—Ç–∫–æ–≤–µ –¥–∂–µ—Ä–µ–ª–æ")
        print("   3. –ü—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –º–µ–¥–∏—á–Ω–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
    else:
        print("‚ùå –ê–î–ê–ü–¢–ê–¶–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê –ó –ü–û–ú–ò–õ–ö–ê–ú–ò")
    print("=" * 60)

if __name__ == "__main__":
    main()
