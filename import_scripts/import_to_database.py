#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É –≤—Å—ñ—Ö Excel —Ñ–∞–π–ª—ñ–≤ –≤ SQLite –±–∞–∑—É –¥–∞–Ω–∏—Ö
"""

import os
import sys
import time
import logging
from datetime import datetime

# –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –≤ —à–ª—è—Ö
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from utils.database_manager import DatabaseManager

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('import_log.txt', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —ñ–º–ø–æ—Ä—Ç—É"""
    print("üöÄ –ü–æ—á–∞—Ç–æ–∫ —ñ–º–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö –≤ SQLite –±–∞–∑—É")
    print("=" * 60)
    
    start_time = time.time()
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    db_manager = DatabaseManager()
    
    # –®–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤
    data_dir = "data"
    
    treatments_file = os.path.join(data_dir, "treatments_2025.xlsx")
    
    payment_files = {
        "may_2025": os.path.join(data_dir, "may_2025.xlsx"),
        "june_2025": os.path.join(data_dir, "june_2025.xlsx"),
        "july_2025": os.path.join(data_dir, "july_2025.xlsx"),
        "august_2025": os.path.join(data_dir, "august_2025.xlsx")
    }
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
    missing_files = []
    
    if not os.path.exists(treatments_file):
        missing_files.append(treatments_file)
    
    for month, file_path in payment_files.items():
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ —Ñ–∞–π–ª–∏:")
        for file_path in missing_files:
            print(f"   - {file_path}")
        return
    
    print("‚úÖ –í—Å—ñ —Ñ–∞–π–ª–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ")
    
    # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –¥–∞–Ω—ñ –ª—ñ–∫—É–≤–∞–Ω–Ω—è
    print("\nüìã –Ü–º–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –ª—ñ–∫—É–≤–∞–Ω–Ω—è...")
    treatments_count = db_manager.import_treatments_data(treatments_file)
    print(f"‚úÖ –Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {treatments_count} –∑–∞–ø–∏—Å—ñ–≤ –ª—ñ–∫—É–≤–∞–Ω–Ω—è")
    
    # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –¥–∞–Ω—ñ –æ–ø–ª–∞—Ç
    print("\nüí∞ –Ü–º–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –æ–ø–ª–∞—Ç...")
    payments_count = db_manager.import_payments_data(payment_files)
    print(f"‚úÖ –Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {payments_count} –∑–∞–ø–∏—Å—ñ–≤ –æ–ø–ª–∞—Ç")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:")
    stats = db_manager.get_database_stats()
    
    print(f"   –ó–∞–ø–∏—Å—ñ–≤ –ª—ñ–∫—É–≤–∞–Ω–Ω—è: {stats['treatments_count']}")
    print(f"   –ó–∞–ø–∏—Å—ñ–≤ –æ–ø–ª–∞—Ç: {stats['payments_count']}")
    print(f"   –î–æ—Å—Ç—É–ø–Ω—ñ –º—ñ—Å—è—Ü—ñ: {', '.join(stats['available_months'])}")
    print(f"   –†–æ–∑–º—ñ—Ä –ë–î: {stats['database_size'] / 1024 / 1024:.2f} MB")
    print(f"   –®–ª—è—Ö –¥–æ –ë–î: {stats['database_path']}")
    
    total_time = time.time() - start_time
    print(f"\n‚úÖ –Ü–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {total_time:.1f} —Å–µ–∫—É–Ω–¥")
    
    # –¢–µ—Å—Ç—É—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –ø–æ—à—É–∫—É
    print("\nüîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ –ø–æ—à—É–∫—É...")
    test_search_speed(db_manager)

def test_search_speed(db_manager: DatabaseManager):
    """–¢–µ—Å—Ç—É—î —à–≤–∏–¥–∫—ñ—Å—Ç—å –ø–æ—à—É–∫—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö"""
    
    # –¢–µ—Å—Ç 1: –ü–æ—à—É–∫ –ª—ñ–∫—É–≤–∞–Ω–Ω—è –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
    start_time = time.time()
    criteria = {
        'unit_filter': True,
        'diagnosis_keywords': True,
        'combat_status': '–±–æ–π–æ–≤–∞'
    }
    treatments_results = db_manager.search_treatments(criteria)
    treatments_time = time.time() - start_time
    
    print(f"   –ü–æ—à—É–∫ –ª—ñ–∫—É–≤–∞–Ω–Ω—è: {len(treatments_results)} –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ {treatments_time:.3f} —Å–µ–∫")
    
    # –¢–µ—Å—Ç 2: –ü–æ—à—É–∫ –æ–ø–ª–∞—Ç –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –ø–∞—Ü—ñ—î–Ω—Ç–∞
    if treatments_results:
        patient_name = treatments_results[0]['full_name']
        start_time = time.time()
        payment_results = db_manager.search_payments(patient_name)
        payments_time = time.time() - start_time
        
        print(f"   –ü–æ—à—É–∫ –æ–ø–ª–∞—Ç –¥–ª—è '{patient_name}': {payment_results['total_records']} –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ {payments_time:.3f} —Å–µ–∫")
    
    print("‚úÖ –¢–µ—Å—Ç–∏ —à–≤–∏–¥–∫–æ—Å—Ç—ñ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –Ü–º–ø–æ—Ä—Ç –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
        import traceback
        traceback.print_exc()

