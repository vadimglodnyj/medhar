#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –æ–ø–ª–∞—Ç –¥–ª—è –ë–ê–£–¢–Ü–ù
"""

import sys
import os
import sqlite3
import pandas as pd
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from utils.medical_database import MedicalDatabase

def fix_bautin_payments():
    """–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –æ–ø–ª–∞—Ç –¥–ª—è –ë–ê–£–¢–Ü–ù"""
    print("üîß –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –æ–ø–ª–∞—Ç –¥–ª—è –ë–ê–£–¢–Ü–ù")
    print("=" * 80)
    
    db = MedicalDatabase()
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–∞—Ü—ñ—î–Ω—Ç–∞ –ë–ê–£–¢–Ü–ù
    with sqlite3.connect(db.db_path) as conn:
        conn.row_factory = sqlite3.Row
        
        cursor = conn.execute('''
            SELECT id, full_name FROM patients 
            WHERE full_name LIKE '%–ë–ê–£–¢–Ü–ù%'
        ''')
        patient = cursor.fetchone()
        
        if not patient:
            print("‚ùå –ü–∞—Ü—ñ—î–Ω—Ç –ë–ê–£–¢–Ü–ù –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        patient_id = patient['id']
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ü—ñ—î–Ω—Ç–∞: {patient['full_name']} (ID: {patient_id})")
        
        # –í–∏–¥–∞–ª—è—î–º–æ —ñ—Å–Ω—É—é—á—ñ –æ–ø–ª–∞—Ç–∏ –¥–ª—è –ë–ê–£–¢–Ü–ù
        print(f"\nüóëÔ∏è –í–∏–¥–∞–ª—è—î–º–æ —ñ—Å–Ω—É—é—á—ñ –æ–ø–ª–∞—Ç–∏...")
        cursor = conn.execute('DELETE FROM payments WHERE patient_id = ?', (patient_id,))
        print(f"   –í–∏–¥–∞–ª–µ–Ω–æ {cursor.rowcount} –∑–∞–ø–∏—Å—ñ–≤")
        
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –æ–ø–ª–∞—Ç–∏ –∑ Excel —Ñ–∞–π–ª—ñ–≤
        payment_files = {
            "may": "data/may_2025.xlsx",
            "june": "data/june_2025.xlsx", 
            "july": "data/july_2025.xlsx",
            "august": "data/august_2025.xlsx"
        }
        
        imported_payments = 0
        
        for month, file_path in payment_files.items():
            if not os.path.exists(file_path):
                print(f"   ‚ö†Ô∏è –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {file_path}")
                continue
            
            print(f"\nüìã –Ü–º–ø–æ—Ä—Ç –æ–ø–ª–∞—Ç –∑ {month}:")
            
            try:
                df = pd.read_excel(file_path)
                
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–ø–∏—Å–∏ –ë–ê–£–¢–Ü–ù
                name_columns = ['–ü–Ü–ë', '–ü—Ä—ñ–∑–≤–∏—â–µ, –≤–ª–∞—Å–Ω–µ —ñ–º\'—è, –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ (–∑–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ)']
                bautin_records = None
                
                for col in name_columns:
                    if col in df.columns:
                        bautin_records = df[df[col].str.contains('–ë–ê–£–¢–Ü–ù', case=False, na=False)]
                        if not bautin_records.empty:
                            break
                
                if bautin_records is None or bautin_records.empty:
                    print(f"   ‚ùå –ë–ê–£–¢–Ü–ù –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ {month}")
                    continue
                
                print(f"   ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(bautin_records)} –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –ë–ê–£–¢–Ü–ù")
                
                for i, (_, row) in enumerate(bautin_records.iterrows(), 1):
                    print(f"\n   üìÑ –ó–∞–ø–∏—Å {i}:")
                    
                    # –ü–∞—Ä—Å–∏–º–æ –¥–∞–Ω—ñ
                    def safe_get(row, column, default=None):
                        if column in row.index and pd.notna(row[column]):
                            return row[column]
                        return default
                    
                    def parse_treatment_days(days_value):
                        if pd.isna(days_value) or days_value is None:
                            return 0.0
                        
                        try:
                            days_str = str(days_value)
                            if not days_str or days_str.strip() == '':
                                return 0.0
                            
                            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ —á–∏—Å–ª–∞ –≤ —Ä—è–¥–∫—É
                            import re
                            numbers = re.findall(r'\d+(?:\.\d+)?', days_str)
                            
                            if not numbers:
                                return 0.0
                            
                            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞–π–±—ñ–ª—å—à–µ —á–∏—Å–ª–æ
                            return max(float(num) for num in numbers)
                        except (ValueError, TypeError):
                            return 0.0
                    
                    injury_date = safe_get(row, '–î–∞—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ä–∞–Ω–µ–Ω–Ω—è (–∫–æ–Ω—Ç—É–∑—ñ—ó, —Ç—Ä–∞–≤–º–∏, –∫–∞–ª—ñ—Ü—Ç–≤–∞)')
                    if injury_date and hasattr(injury_date, 'strftime'):
                        injury_date = injury_date.strftime('%Y-%m-%d')
                    
                    total_days = parse_treatment_days(safe_get(row, '–°—É–º–∞—Ä–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –ª—ñ–∫—É–≤–∞–Ω–Ω—è'))
                    diagnosis = safe_get(row, '–î—ñ–∞–≥–Ω–æ–∑')
                    payment_dates = safe_get(row, '–î–∞—Ç–∏ –∑–∞–≥–∞–ª')
                    
                    print(f"      –î–∞—Ç–∞ –ø–æ—Ä–∞–Ω–µ–Ω–Ω—è: {injury_date}")
                    print(f"      –î–Ω—ñ –ª—ñ–∫—É–≤–∞–Ω–Ω—è: {total_days}")
                    print(f"      –î—ñ–∞–≥–Ω–æ–∑: {str(diagnosis)[:100]}...")
                    print(f"      –î–∞—Ç–∏ –æ–ø–ª–∞—Ç–∏: {payment_dates}")
                    
                    # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–ø–ª–∞—Ç—É
                    payment_id = db.create_payment(
                        patient_id=patient_id,
                        month=month,
                        year=2025,
                        injury_date=injury_date,
                        total_treatment_days=total_days,
                        payment_date=injury_date,
                        diagnosis=diagnosis,
                        payment_dates=str(payment_dates),
                        raw_data=str(row.to_dict())
                    )
                    
                    print(f"      ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –æ–ø–ª–∞—Ç—É ID: {payment_id}")
                    imported_payments += 1
                
            except Exception as e:
                print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É {month}: {e}")
        
        conn.commit()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
        cursor = conn.execute('''
            SELECT id, payment_month, payment_year, total_treatment_days, 
                   payment_date, diagnosis, payment_dates
            FROM payments
            WHERE patient_id = ?
            ORDER BY payment_year, payment_month
        ''', (patient_id,))
        
        payments = cursor.fetchall()
        print(f"   –Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {len(payments)} –æ–ø–ª–∞—Ç:")
        
        for payment in payments:
            print(f"\n   üí∞ –û–ø–ª–∞—Ç–∞ ID {payment['id']}:")
            print(f"      –ú—ñ—Å—è—Ü—å: {payment['payment_month']} {payment['payment_year']}")
            print(f"      –î–Ω—ñ –ª—ñ–∫—É–≤–∞–Ω–Ω—è: {payment['total_treatment_days']}")
            print(f"      –î–∞—Ç–∞ –æ–ø–ª–∞—Ç–∏: {payment['payment_date']}")
            print(f"      –î–∞—Ç–∏ –∑–∞–≥–∞–ª: {payment['payment_dates']}")

if __name__ == "__main__":
    fix_bautin_payments()
