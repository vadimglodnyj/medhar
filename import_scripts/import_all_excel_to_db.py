#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É –≤—Å—ñ—Ö Excel —Ñ–∞–π–ª—ñ–≤ –≤ SQLite –ë–î
"""

import os
import sys
import pandas as pd
import logging
from datetime import datetime

# –î–æ–¥–∞—î–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫—É –ø–∞–ø–∫—É –¥–æ —à–ª—è—Ö—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils.new_medical_database import NewMedicalDatabase

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def analyze_excel_files():
    """–ê–Ω–∞–ª—ñ–∑—É—î –≤—Å—ñ Excel —Ñ–∞–π–ª–∏ –≤ –ø–∞–ø—Ü—ñ data/"""
    data_dir = "data"
    excel_files = []
    
    for file in os.listdir(data_dir):
        if file.endswith('.xlsx') and not file.startswith('~'):
            file_path = os.path.join(data_dir, file)
            try:
                df = pd.read_excel(file_path)
                excel_files.append({
                    'file': file,
                    'path': file_path,
                    'rows': len(df),
                    'cols': len(df.columns),
                    'columns': list(df.columns)
                })
                logger.info(f"üìä {file}: {len(df)} —Ä—è–¥–∫—ñ–≤, {len(df.columns)} –∫–æ–ª–æ–Ω–æ–∫")
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è {file}: {e}")
    
    return excel_files

def import_treatments_data():
    """–Ü–º–ø–æ—Ä—Ç—É—î –¥–∞–Ω—ñ –ª—ñ–∫—É–≤–∞–Ω—å –∑ Excel –≤ –ë–î"""
    logger.info("üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –ª—ñ–∫—É–≤–∞–Ω—å...")
    
    db = NewMedicalDatabase("database/medical_new.db")
    
    # –û—Å–Ω–æ–≤–Ω—ñ —Ñ–∞–π–ª–∏ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É
    treatment_files = [
        "data/treatments_2024.xlsx",
        "data/treatments_2025.xlsx", 
        "data/old_treatments.xlsx"
    ]
    
    total_imported = 0
    
    for file_path in treatment_files:
        if not os.path.exists(file_path):
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {file_path}")
            continue
            
        logger.info(f"üì• –Ü–º–ø–æ—Ä—Ç—É—î–º–æ {file_path}...")
        
        try:
            df = pd.read_excel(file_path)
            logger.info(f"üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å—ñ–≤ –∑ {file_path}")
            
            # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –¥–∞–Ω—ñ
            result = db.import_excel_data(df, {})
            
            imported = result.get('inserted', 0) + result.get('updated', 0)
            total_imported += imported
            
            logger.info(f"‚úÖ –Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {imported} –∑–∞–ø–∏—Å—ñ–≤ –∑ {file_path}")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É {file_path}: {e}")
    
    logger.info(f"üéâ –ó–∞–≥–∞–ª–æ–º —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {total_imported} –∑–∞–ø–∏—Å—ñ–≤")
    return total_imported

def import_personnel_data():
    """–Ü–º–ø–æ—Ä—Ç—É—î –¥–∞–Ω—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—É –∑ Excel –≤ –ë–î"""
    logger.info("üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—É...")
    
    # –®—É–∫–∞—î–º–æ —Ñ–∞–π–ª–∏ –∑ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º
    personnel_files = [
        "data/allsoldiers.xlsx",
        "data/payment.xlsx"
    ]
    
    total_imported = 0
    
    for file_path in personnel_files:
        if not os.path.exists(file_path):
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {file_path}")
            continue
            
        logger.info(f"üì• –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª –∑ {file_path}...")
        
        try:
            df = pd.read_excel(file_path)
            logger.info(f"üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å—ñ–≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—É")
            
            # –¢—É—Ç –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É —ñ–º–ø–æ—Ä—Ç—É –ø–µ—Ä—Å–æ–Ω–∞–ª—É
            # –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥—É—î–º–æ
            logger.info(f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª –∑ {file_path} –≥–æ—Ç–æ–≤–∏–π –¥–æ —ñ–º–ø–æ—Ä—Ç—É")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –ø–µ—Ä—Å–æ–Ω–∞–ª—É {file_path}: {e}")
    
    return total_imported

def cleanup_processed_files():
    """–û—á–∏—â–∞—î –ø—Ä–æ–º—ñ–∂–Ω—ñ Excel —Ñ–∞–π–ª–∏ –ø—ñ—Å–ª—è —ñ–º–ø–æ—Ä—Ç—É"""
    logger.info("üßπ –û—á–∏—â–∞—î–º–æ –ø—Ä–æ–º—ñ–∂–Ω—ñ —Ñ–∞–π–ª–∏...")
    
    # –§–∞–π–ª–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è (–ø—Ä–æ–º—ñ–∂–Ω—ñ –æ–±—Ä–æ–±–∫–∏)
    files_to_remove = [
        "data/treatments_adapted.xlsx",
        "data/treatments_cleaned.xlsx", 
        "data/treatments_final_clean.xlsx",
        "data/treatments_final_correct.xlsx",
        "data/treatments_final_perfect.xlsx",
        "data/treatments_final_selective.xlsx"
    ]
    
    removed_count = 0
    
    for file_path in files_to_remove:
        if os.path.exists(file_path):
            try:
                os.remove(file_path)
                logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ {file_path}")
                removed_count += 1
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è {file_path}: {e}")
    
    logger.info(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ {removed_count} –ø—Ä–æ–º—ñ–∂–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —ñ–º–ø–æ—Ä—Ç—É"""
    logger.info("üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ –ø–æ–≤–Ω–∏–π —ñ–º–ø–æ—Ä—Ç Excel ‚Üí SQLite –ë–î")
    
    # 1. –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ñ–∞–π–ª–∏
    logger.info("üìã –ê–Ω–∞–ª—ñ–∑—É—î–º–æ Excel —Ñ–∞–π–ª–∏...")
    excel_files = analyze_excel_files()
    
    # 2. –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –¥–∞–Ω—ñ –ª—ñ–∫—É–≤–∞–Ω—å
    treatments_imported = import_treatments_data()
    
    # 3. –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –¥–∞–Ω—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—É
    personnel_imported = import_personnel_data()
    
    # 4. –û—á–∏—â–∞—î–º–æ –ø—Ä–æ–º—ñ–∂–Ω—ñ —Ñ–∞–π–ª–∏
    cleanup_processed_files()
    
    # 5. –ü—ñ–¥—Å—É–º–æ–∫
    logger.info("üéØ –ü–Ü–î–°–£–ú–û–ö –Ü–ú–ü–û–†–¢–£:")
    logger.info(f"üìä –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ Excel —Ñ–∞–π–ª—ñ–≤: {len(excel_files)}")
    logger.info(f"üè• –Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –ª—ñ–∫—É–≤–∞–Ω—å: {treatments_imported}")
    logger.info(f"üë• –Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—É: {personnel_imported}")
    logger.info("‚úÖ –Ü–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ SQLite –ë–î –∑–∞–º—ñ—Å—Ç—å Excel")

if __name__ == "__main__":
    main()

